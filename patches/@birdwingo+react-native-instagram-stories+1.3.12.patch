diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/.DS_Store b/node_modules/@birdwingo/react-native-instagram-stories/src/.DS_Store
new file mode 100644
index 0000000..dbd07c1
Binary files /dev/null and b/node_modules/@birdwingo/react-native-instagram-stories/src/.DS_Store differ
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/.DS_Store b/node_modules/@birdwingo/react-native-instagram-stories/src/components/.DS_Store
new file mode 100644
index 0000000..2765d38
Binary files /dev/null and b/node_modules/@birdwingo/react-native-instagram-stories/src/components/.DS_Store differ
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/Header.styles.ts b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/Header.styles.ts
index 9419aa6..2d7576d 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/Header.styles.ts
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/Header.styles.ts
@@ -1,25 +1,25 @@
-import { StyleSheet } from 'react-native';
+import { StyleSheet } from "react-native";
 
-export default StyleSheet.create( {
+export default StyleSheet.create({
   container: {
-    position: 'absolute',
+    position: "absolute",
     left: 16,
     top: 32,
   },
   containerFlex: {
-    flexDirection: 'row',
-    justifyContent: 'space-between',
-    alignItems: 'center',
+    flexDirection: "row",
+    justifyContent: "space-between",
+    alignItems: "center",
   },
   left: {
-    flexDirection: 'row',
-    alignItems: 'center',
-    gap: 12,
+    flexDirection: "row",
+    alignItems: "center",
+    gap: 7,
     flex: 1,
   },
   avatar: {
     borderWidth: 1.5,
-    borderColor: '#FFF',
-    overflow: 'hidden',
+    borderColor: "#FFF",
+    overflow: "hidden",
   },
-} );
+});
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/index.tsx b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/index.tsx
index 32010ab..97a2f09 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/index.tsx
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Header/index.tsx
@@ -1,57 +1,75 @@
-import React, { FC, memo } from 'react';
-import {
-  View, Text, Image, TouchableOpacity,
-  Pressable,
-} from 'react-native';
-import { WIDTH } from '../../core/constants';
-import HeaderStyles from './Header.styles';
-import { StoryHeaderProps } from '../../core/dto/componentsDTO';
-import Close from '../Icon/close';
+import React, { FC, memo } from "react";
+import { View, Text, Image, TouchableOpacity, Pressable } from "react-native";
+import { WIDTH } from "../../core/constants";
+import HeaderStyles from "./Header.styles";
+import { StoryHeaderProps } from "../../core/dto/componentsDTO";
+import Close from "../Icon/close";
+import { Ionicons } from "@expo/vector-icons";
 
-const StoryHeader: FC<StoryHeaderProps> = ( {
-  avatarSource, name, onClose, avatarSize, textStyle, closeColor, headerStyle,
-  headerContainerStyle, renderStoryHeader, onStoryHeaderPress,
-} ) => {
-
-  const styles = { width: avatarSize, height: avatarSize, borderRadius: avatarSize };
+const StoryHeader: FC<StoryHeaderProps> = ({
+  avatarSource,
+  name,
+  onClose,
+  avatarSize,
+  textStyle,
+  closeColor,
+  headerStyle,
+  headerContainerStyle,
+  renderStoryHeader,
+  onStoryHeaderPress,
+  onMore,
+}) => {
+  const styles = {
+    width: avatarSize,
+    height: avatarSize,
+    borderRadius: avatarSize,
+  };
   const width = WIDTH - HeaderStyles.container.left * 2;
 
-  if ( renderStoryHeader ) {
-
+  if (renderStoryHeader) {
     return (
-      <View
-        style={[ HeaderStyles.container, { width }, headerContainerStyle ]}
-      >
+      <View style={[HeaderStyles.container, { width }, headerContainerStyle]}>
         {renderStoryHeader()}
       </View>
     );
-
   }
 
   return (
-    <View style={[
-      HeaderStyles.container, HeaderStyles.containerFlex,
-      { width }, headerContainerStyle,
-    ]}
+    <View
+      style={[
+        HeaderStyles.container,
+        HeaderStyles.containerFlex,
+        { width },
+        headerContainerStyle,
+      ]}
     >
-      <Pressable style={[ HeaderStyles.left, headerStyle ]} onPress={() => onStoryHeaderPress?.()}>
-        {( Boolean( avatarSource ) ) && (
-          <View style={[ HeaderStyles.avatar, { borderRadius: styles.borderRadius } ]}>
+      <Pressable
+        style={[HeaderStyles.left, headerStyle]}
+        onPress={() => onStoryHeaderPress?.()}
+      >
+        {Boolean(avatarSource) && (
+          <View
+            style={[HeaderStyles.avatar, { borderRadius: styles.borderRadius }]}
+          >
             <Image source={avatarSource!} style={styles} />
           </View>
         )}
-        {Boolean( name ) && <Text style={textStyle}>{name}</Text>}
+        {Boolean(name) && <Text style={textStyle}>{name}</Text>}
       </Pressable>
-      <TouchableOpacity
-        onPress={onClose}
-        hitSlop={16}
-        testID="storyCloseButton"
-      >
-        <Close color={closeColor} />
-      </TouchableOpacity>
+      <View style={{ flexDirection: "row", alignItems: "center", gap: 10 }}>
+        <TouchableOpacity onPress={onMore}>
+          <Ionicons name="ellipsis-horizontal" size={24} color="#c4c4c4" />
+        </TouchableOpacity>
+        <TouchableOpacity
+          onPress={onClose}
+          hitSlop={16}
+          testID="storyCloseButton"
+        >
+          <Close color={closeColor} />
+        </TouchableOpacity>
+      </View>
     </View>
   );
-
 };
 
-export default memo( StoryHeader );
+export default memo(StoryHeader);
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/InstagramStories/index.tsx b/node_modules/@birdwingo/react-native-instagram-stories/src/components/InstagramStories/index.tsx
index 7d2d3f0..12785d9 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/components/InstagramStories/index.tsx
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/components/InstagramStories/index.tsx
@@ -1,265 +1,248 @@
 import React, {
-  forwardRef, useImperativeHandle, useState, useEffect, useRef, memo,
-} from 'react';
-import { useSharedValue } from 'react-native-reanimated';
-import { Image } from 'react-native';
-import { clearProgressStorage, getProgressStorage, setProgressStorage } from '../../core/helpers/storage';
-import { InstagramStoriesProps, InstagramStoriesPublicMethods } from '../../core/dto/instagramStoriesDTO';
-import { ProgressStorageProps } from '../../core/dto/helpersDTO';
+  forwardRef,
+  useImperativeHandle,
+  useState,
+  useEffect,
+  useRef,
+  memo,
+} from "react";
+import { useSharedValue } from "react-native-reanimated";
+import { Image } from "react-native";
 import {
-  ANIMATION_DURATION, DEFAULT_COLORS, SEEN_LOADER_COLORS,
-  STORY_AVATAR_SIZE, AVATAR_SIZE, BACKGROUND_COLOR, CLOSE_COLOR,
-} from '../../core/constants';
-import StoryModal from '../Modal';
-import { StoryModalPublicMethods } from '../../core/dto/componentsDTO';
-import StoryAvatarList from '../AvatarList';
-
-const InstagramStories = forwardRef<InstagramStoriesPublicMethods, InstagramStoriesProps>( ( {
-  stories,
-  saveProgress = false,
-  avatarBorderColors = DEFAULT_COLORS,
-  avatarSeenBorderColors = SEEN_LOADER_COLORS,
-  avatarSize = AVATAR_SIZE,
-  storyAvatarSize = STORY_AVATAR_SIZE,
-  avatarListContainerStyle,
-  avatarListContainerProps,
-  animationDuration = ANIMATION_DURATION,
-  backgroundColor = BACKGROUND_COLOR,
-  showName = false,
-  nameTextStyle,
-  nameTextProps,
-  videoAnimationMaxDuration,
-  videoProps,
-  closeIconColor = CLOSE_COLOR,
-  isVisible = false,
-  hideAvatarList = false,
-  avatarBorderRadius,
-  ...props
-}, ref ) => {
-
-  const [ data, setData ] = useState( stories );
-
-  const seenStories = useSharedValue<ProgressStorageProps>( {} );
-  const loadedStories = useSharedValue( false );
-  const loadingStory = useSharedValue<string | undefined>( undefined );
-
-  const modalRef = useRef<StoryModalPublicMethods>( null );
-
-  const onPress = ( id: string ) => {
-
-    loadingStory.value = id;
-
-    if ( loadedStories.value ) {
-
-      modalRef.current?.show( id );
-
-    }
-
-  };
-
-  const onLoad = () => {
-
-    loadingStory.value = undefined;
-
-  };
-
-  const onStoriesChange = async () => {
-
-    seenStories.value = await ( saveProgress ? getProgressStorage() : {} );
-
-    const promises = stories.map( ( story ) => {
-
-      const seenStoryIndex = story.stories.findIndex(
-        ( item ) => item.id === seenStories.value[story.id],
-      );
-      const seenStory = story.stories[seenStoryIndex + 1] || story.stories[0];
-
-      if ( !seenStory ) {
-
-        return true;
-
+  clearProgressStorage,
+  getProgressStorage,
+  setProgressStorage,
+} from "../../core/helpers/storage";
+import {
+  InstagramStoriesProps,
+  InstagramStoriesPublicMethods,
+} from "../../core/dto/instagramStoriesDTO";
+import { ProgressStorageProps } from "../../core/dto/helpersDTO";
+import {
+  ANIMATION_DURATION,
+  DEFAULT_COLORS,
+  SEEN_LOADER_COLORS,
+  STORY_AVATAR_SIZE,
+  AVATAR_SIZE,
+  BACKGROUND_COLOR,
+  CLOSE_COLOR,
+} from "../../core/constants";
+import StoryModal from "../Modal";
+import { StoryModalPublicMethods } from "../../core/dto/componentsDTO";
+import StoryAvatarList from "../AvatarList";
+
+const InstagramStories = forwardRef<
+  InstagramStoriesPublicMethods,
+  InstagramStoriesProps
+>(
+  (
+    {
+      stories,
+      saveProgress = false,
+      avatarBorderColors = DEFAULT_COLORS,
+      avatarSeenBorderColors = SEEN_LOADER_COLORS,
+      avatarSize = AVATAR_SIZE,
+      storyAvatarSize = STORY_AVATAR_SIZE,
+      avatarListContainerStyle,
+      avatarListContainerProps,
+      animationDuration = ANIMATION_DURATION,
+      backgroundColor = BACKGROUND_COLOR,
+      showName = false,
+      nameTextStyle,
+      nameTextProps,
+      videoAnimationMaxDuration,
+      videoProps,
+      closeIconColor = CLOSE_COLOR,
+      isVisible = false,
+      hideAvatarList = false,
+      avatarBorderRadius,
+      ...props
+    },
+    ref
+  ) => {
+    const [data, setData] = useState(stories);
+
+    const seenStories = useSharedValue<ProgressStorageProps>({});
+    const loadedStories = useSharedValue(false);
+    const loadingStory = useSharedValue<string | undefined>(undefined);
+
+    const modalRef = useRef<StoryModalPublicMethods>(null);
+
+    const onPress = (id: string) => {
+      loadingStory.value = id;
+
+      if (loadedStories.value) {
+        modalRef.current?.show(id);
       }
+    };
 
-      return seenStory.mediaType !== 'video' ? Image.prefetch( ( seenStory.source as any )?.uri ) : true;
-
-    } );
-
-    await Promise.all( promises );
-
-    loadedStories.value = true;
+    const onLoad = () => {
+      loadingStory.value = undefined;
+    };
 
-    if ( loadingStory.value ) {
+    const onStoriesChange = async () => {
+      seenStories.value = await (saveProgress ? getProgressStorage() : {});
 
-      onPress( loadingStory.value );
+      const promises = stories.map((story) => {
+        const seenStoryIndex = story.stories.findIndex(
+          (item) => item.id === seenStories.value[story.id]
+        );
+        const seenStory = story.stories[seenStoryIndex + 1] || story.stories[0];
 
-    }
-
-  };
-
-  const onSeenStoriesChange = async ( user: string, value: string ) => {
-
-    if ( !saveProgress ) {
-
-      return;
+        if (!seenStory) {
+          return true;
+        }
 
-    }
+        return seenStory.mediaType !== "video"
+          ? Image.prefetch((seenStory.source as any)?.uri)
+          : true;
+      });
 
-    if ( seenStories.value[user] ) {
+      await Promise.all(promises);
 
-      const userData = data.find( ( story ) => story.id === user );
-      const oldIndex = userData?.stories.findIndex(
-        ( story ) => story.id === seenStories.value[user],
-      );
-      const newIndex = userData?.stories.findIndex( ( story ) => story.id === value );
+      loadedStories.value = true;
 
-      if ( oldIndex! > newIndex! ) {
+      if (loadingStory.value) {
+        onPress(loadingStory.value);
+      }
+    };
 
+    const onSeenStoriesChange = async (user: string, value: string) => {
+      if (!saveProgress) {
         return;
-
       }
 
-    }
-
-    seenStories.value = await setProgressStorage( user, value );
-
-  };
-
-  useImperativeHandle(
-    ref,
-    () => ( {
-      spliceStories: ( newStories, index ) => {
-
-        if ( index === undefined ) {
-
-          setData( [ ...data, ...newStories ] );
-
-        } else {
-
-          const newData = [ ...data ];
-          newData.splice( index, 0, ...newStories );
-          setData( newData );
-
-        }
-
-      },
-      spliceUserStories: ( newStories, user, index ) => {
-
-        const userData = data.find( ( story ) => story.id === user );
-
-        if ( !userData ) {
+      if (seenStories.value[user]) {
+        const userData = data.find((story) => story.id === user);
+        const oldIndex = userData?.stories.findIndex(
+          (story) => story.id === seenStories.value[user]
+        );
+        const newIndex = userData?.stories.findIndex(
+          (story) => story.id === value
+        );
 
+        if (oldIndex! > newIndex!) {
           return;
-
-        }
-
-        const newData = index === undefined
-          ? [ ...userData.stories, ...newStories ]
-          : [ ...userData.stories ];
-
-        if ( index !== undefined ) {
-
-          newData.splice( index, 0, ...newStories );
-
-        }
-
-        setData( data.map( ( value ) => ( value.id === user ? {
-          ...value,
-          stories: newData,
-        } : value ) ) );
-
-      },
-      setStories: ( newStories ) => {
-
-        setData( newStories );
-
-      },
-      clearProgressStorage,
-      goToSpecificStory: ( userId, index ) => modalRef.current?.goToSpecificStory( userId, index ),
-      hide: () => modalRef.current?.hide(),
-      show: ( id ) => {
-
-        if ( id ) {
-
-          onPress( id );
-
-        } else if ( data[0]?.id ) {
-
-          onPress( data[0]?.id );
-
         }
+      }
 
-      },
-      pause: () => modalRef.current?.pause()!,
-      resume: () => modalRef.current?.resume()!,
-      goToPreviousStory: () => modalRef.current?.goToPreviousStory()!,
-      goToNextStory: () => modalRef.current?.goToNextStory()!,
-      getCurrentStory: () => modalRef.current?.getCurrentStory()!,
-    } ),
-    [ data ],
-  );
-
-  useEffect( () => {
-
-    onStoriesChange();
-
-  }, [ data ] );
-
-  useEffect( () => {
-
-    setData( stories );
-
-  }, [ stories ] );
-
-  useEffect( () => {
-
-    if ( isVisible && data[0]?.id ) {
-
-      modalRef.current?.show( data[0]?.id );
-
-    } else {
-
-      modalRef.current?.hide();
-
-    }
-
-  }, [ isVisible ] );
-
-  return (
-    <>
-      {!hideAvatarList && (
-        <StoryAvatarList
+      seenStories.value = await setProgressStorage(user, value);
+    };
+
+    useImperativeHandle(
+      ref,
+      () => ({
+        spliceStories: (newStories, index) => {
+          if (index === undefined) {
+            setData([...data, ...newStories]);
+          } else {
+            const newData = [...data];
+            newData.splice(index, 0, ...newStories);
+            setData(newData);
+          }
+        },
+        spliceUserStories: (newStories, user, index) => {
+          const userData = data.find((story) => story.id === user);
+
+          if (!userData) {
+            return;
+          }
+
+          const newData =
+            index === undefined
+              ? [...userData.stories, ...newStories]
+              : [...userData.stories];
+
+          if (index !== undefined) {
+            newData.splice(index, 0, ...newStories);
+          }
+
+          setData(
+            data.map((value) =>
+              value.id === user
+                ? {
+                    ...value,
+                    stories: newData,
+                  }
+                : value
+            )
+          );
+        },
+        setStories: (newStories) => {
+          setData(newStories);
+        },
+        clearProgressStorage,
+        goToSpecificStory: (userId, index) =>
+          modalRef.current?.goToSpecificStory(userId, index),
+        hide: () => modalRef.current?.hide(),
+        show: (id) => {
+          if (id) {
+            onPress(id);
+          } else if (data[0]?.id) {
+            onPress(data[0]?.id);
+          }
+        },
+        pause: () => modalRef.current?.pause()!,
+        resume: () => modalRef.current?.resume()!,
+        goToPreviousStory: () => modalRef.current?.goToPreviousStory()!,
+        goToNextStory: () => modalRef.current?.goToNextStory()!,
+        getCurrentStory: () => modalRef.current?.getCurrentStory()!,
+      }),
+      [data]
+    );
+
+    useEffect(() => {
+      onStoriesChange();
+    }, [data]);
+
+    useEffect(() => {
+      setData(stories);
+    }, [stories]);
+
+    useEffect(() => {
+      if (isVisible && data[0]?.id) {
+        modalRef.current?.show(data[0]?.id);
+      } else {
+        modalRef.current?.hide();
+      }
+    }, [isVisible]);
+
+    return (
+      <>
+        {!hideAvatarList && (
+          <StoryAvatarList
+            stories={data}
+            loadingStory={loadingStory}
+            seenStories={seenStories}
+            colors={avatarBorderColors}
+            seenColors={avatarSeenBorderColors}
+            size={avatarSize}
+            showName={showName}
+            nameTextStyle={nameTextStyle}
+            nameTextProps={nameTextProps}
+            avatarListContainerProps={avatarListContainerProps}
+            avatarListContainerStyle={avatarListContainerStyle}
+            avatarBorderRadius={avatarBorderRadius}
+            onPress={onPress}
+          />
+        )}
+        <StoryModal
+          ref={modalRef}
           stories={data}
-          loadingStory={loadingStory}
           seenStories={seenStories}
-          colors={avatarBorderColors}
-          seenColors={avatarSeenBorderColors}
-          size={avatarSize}
-          showName={showName}
-          nameTextStyle={nameTextStyle}
-          nameTextProps={nameTextProps}
-          avatarListContainerProps={avatarListContainerProps}
-          avatarListContainerStyle={avatarListContainerStyle}
-          avatarBorderRadius={avatarBorderRadius}
-          onPress={onPress}
+          duration={animationDuration}
+          storyAvatarSize={storyAvatarSize}
+          onLoad={onLoad}
+          onSeenStoriesChange={onSeenStoriesChange}
+          backgroundColor={backgroundColor}
+          videoDuration={videoAnimationMaxDuration}
+          videoProps={videoProps}
+          closeIconColor={closeIconColor}
+          {...props}
         />
-      )}
-      <StoryModal
-        ref={modalRef}
-        stories={data}
-        seenStories={seenStories}
-        duration={animationDuration}
-        storyAvatarSize={storyAvatarSize}
-        onLoad={onLoad}
-        onSeenStoriesChange={onSeenStoriesChange}
-        backgroundColor={backgroundColor}
-        videoDuration={videoAnimationMaxDuration}
-        videoProps={videoProps}
-        closeIconColor={closeIconColor}
-        {...props}
-      />
-    </>
-  );
-
-} );
+      </>
+    );
+  }
+);
 
-export default memo( InstagramStories );
+export default memo(InstagramStories);
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Modal/index.tsx b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Modal/index.tsx
index 24fb110..aa63174 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Modal/index.tsx
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Modal/index.tsx
@@ -1,515 +1,471 @@
 import React, {
-  forwardRef, memo, useEffect, useImperativeHandle, useState,
-} from 'react';
-import { GestureResponderEvent, Modal, Pressable } from 'react-native';
+  forwardRef,
+  memo,
+  useEffect,
+  useImperativeHandle,
+  useState,
+} from "react";
+import { GestureResponderEvent, Modal, Pressable } from "react-native";
 import Animated, {
-  cancelAnimation, interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedReaction,
+  cancelAnimation,
+  interpolate,
+  runOnJS,
+  useAnimatedGestureHandler,
+  useAnimatedReaction,
   useAnimatedStyle,
-  useDerivedValue, useSharedValue, withTiming,
-} from 'react-native-reanimated';
+  useDerivedValue,
+  useSharedValue,
+  withTiming,
+} from "react-native-reanimated";
 import {
-  HEIGHT, LONG_PRESS_DURATION, STORY_ANIMATION_DURATION, WIDTH,
-} from '../../core/constants';
-import { GestureContext, StoryModalProps, StoryModalPublicMethods } from '../../core/dto/componentsDTO';
-import GestureHandler from './gesture';
-import StoryList from '../List';
-import ModalStyles from './Modal.styles';
-
-const StoryModal = forwardRef<StoryModalPublicMethods, StoryModalProps>( ( {
-  stories, seenStories, duration, videoDuration, storyAvatarSize, textStyle, containerStyle,
-  backgroundColor, videoProps, closeIconColor, modalAnimationDuration = STORY_ANIMATION_DURATION,
-  storyAnimationDuration = STORY_ANIMATION_DURATION, hideElementsOnLongPress, loopingStories = 'none',
-  statusBarTranslucent, onLoad, onShow, onHide,
-  onSeenStoriesChange, onSwipeUp, onStoryStart, onStoryEnd, footerComponent, ...props
-}, ref ) => {
-
-  const [ visible, setVisible ] = useState( false );
-
-  const x = useSharedValue( 0 );
-  const y = useSharedValue( HEIGHT );
-  const animation = useSharedValue( 0 );
-  const currentStory = useSharedValue( stories[0]?.stories[0]?.id );
-  const paused = useSharedValue( false );
-  const durationValue = useSharedValue( duration );
-  const isLongPress = useSharedValue( false );
-  const hideElements = useSharedValue( false );
-  const lastViewed = useSharedValue<{ [key: string]:number }>( {} );
-  const firstRender = useSharedValue( true );
-
-  const userIndex = useDerivedValue( () => Math.round( x.value / WIDTH ) );
-  const storyIndex = useDerivedValue( () => stories[userIndex.value]?.stories.findIndex(
-    ( story ) => story.id === currentStory.value,
-  ) );
-  const userId = useDerivedValue( () => stories[userIndex.value]?.id );
-  const previousUserId = useDerivedValue( () => stories[userIndex.value - 1]?.id );
-  const nextUserId = useDerivedValue( () => stories[userIndex.value + 1]?.id );
-  const previousStory = useDerivedValue( () => ( storyIndex.value !== undefined
-    ? stories[userIndex.value]?.stories[storyIndex.value - 1]?.id
-    : undefined ) );
-  const nextStory = useDerivedValue( () => ( storyIndex.value !== undefined
-    ? stories[userIndex.value]?.stories[storyIndex.value + 1]?.id
-    : undefined ) );
-
-  const animatedStyles = useAnimatedStyle( () => ( { top: y.value } ) );
-  const backgroundAnimatedStyles = useAnimatedStyle( () => ( {
-    opacity: interpolate( y.value, [ 0, HEIGHT ], [ 1, 0 ] ),
-    backgroundColor,
-  } ) );
-
-  const onClose = () => {
-
-    'worklet';
-
-    y.value = withTiming(
-      HEIGHT,
-      { duration: modalAnimationDuration },
-      () => runOnJS( setVisible )( false ),
+  HEIGHT,
+  LONG_PRESS_DURATION,
+  STORY_ANIMATION_DURATION,
+  WIDTH,
+} from "../../core/constants";
+import {
+  GestureContext,
+  StoryModalProps,
+  StoryModalPublicMethods,
+} from "../../core/dto/componentsDTO";
+import GestureHandler from "./gesture";
+import StoryList from "../List";
+import ModalStyles from "./Modal.styles";
+
+const StoryModal = forwardRef<StoryModalPublicMethods, StoryModalProps>(
+  (
+    {
+      stories,
+      seenStories,
+      duration,
+      videoDuration,
+      storyAvatarSize,
+      textStyle,
+      containerStyle,
+      backgroundColor,
+      videoProps,
+      closeIconColor,
+      modalAnimationDuration = STORY_ANIMATION_DURATION,
+      storyAnimationDuration = STORY_ANIMATION_DURATION,
+      hideElementsOnLongPress,
+      loopingStories = "none",
+      statusBarTranslucent,
+      onLoad,
+      onShow,
+      onHide,
+      onSeenStoriesChange,
+      onSwipeUp,
+      onStoryStart,
+      onStoryEnd,
+      footerComponent,
+      toast,
+      ...props
+    },
+    ref
+  ) => {
+    const [visible, setVisible] = useState(false);
+
+    const x = useSharedValue(0);
+    const y = useSharedValue(HEIGHT);
+    const animation = useSharedValue(0);
+    const currentStory = useSharedValue(stories[0]?.stories[0]?.id);
+    const paused = useSharedValue(false);
+    const durationValue = useSharedValue(duration);
+    const isLongPress = useSharedValue(false);
+    const hideElements = useSharedValue(false);
+    const lastViewed = useSharedValue<{ [key: string]: number }>({});
+    const firstRender = useSharedValue(true);
+
+    const userIndex = useDerivedValue(() => Math.round(x.value / WIDTH));
+    const storyIndex = useDerivedValue(() =>
+      stories[userIndex.value]?.stories.findIndex(
+        (story) => story.id === currentStory.value
+      )
+    );
+    const userId = useDerivedValue(() => stories[userIndex.value]?.id);
+    const previousUserId = useDerivedValue(
+      () => stories[userIndex.value - 1]?.id
+    );
+    const nextUserId = useDerivedValue(() => stories[userIndex.value + 1]?.id);
+    const previousStory = useDerivedValue(() =>
+      storyIndex.value !== undefined
+        ? stories[userIndex.value]?.stories[storyIndex.value - 1]?.id
+        : undefined
+    );
+    const nextStory = useDerivedValue(() =>
+      storyIndex.value !== undefined
+        ? stories[userIndex.value]?.stories[storyIndex.value + 1]?.id
+        : undefined
     );
-    lastViewed.value = {};
-    cancelAnimation( animation );
-
-  };
-
-  const stopAnimation = () => {
-
-    'worklet';
-
-    cancelAnimation( animation );
-
-  };
-
-  const startAnimation = ( resume = false, newDuration?: number ) => {
-
-    'worklet';
-
-    if ( newDuration ) {
-
-      durationValue.value = newDuration;
-
-    } else {
-
-      newDuration = durationValue.value;
-
-    }
-
-    if ( resume ) {
-
-      newDuration -= animation.value * newDuration;
-
-    } else {
 
-      animation.value = 0;
+    const animatedStyles = useAnimatedStyle(() => ({ top: y.value }));
+    const backgroundAnimatedStyles = useAnimatedStyle(() => ({
+      opacity: interpolate(y.value, [0, HEIGHT], [1, 0]),
+      backgroundColor,
+    }));
 
-      if ( userId.value !== undefined && currentStory.value !== undefined ) {
+    const onClose = () => {
+      "worklet";
 
-        runOnJS( onSeenStoriesChange )( userId.value, currentStory.value );
+      y.value = withTiming(HEIGHT, { duration: modalAnimationDuration }, () =>
+        runOnJS(setVisible)(false)
+      );
+      lastViewed.value = {};
+      cancelAnimation(animation);
+    };
 
-      }
+    const stopAnimation = () => {
+      "worklet";
 
-      if ( userId.value !== undefined && storyIndex.value! >= 0 ) {
+      cancelAnimation(animation);
+    };
 
-        lastViewed.value = { ...lastViewed.value, [userId.value]: storyIndex.value ?? 0 };
+    const startAnimation = (resume = false, newDuration?: number) => {
+      "worklet";
 
+      if (newDuration) {
+        durationValue.value = newDuration;
+      } else {
+        newDuration = durationValue.value;
       }
 
-    }
-
-    animation.value = withTiming( 1, { duration: newDuration } );
-
-  };
-
-  const scrollTo = (
-    id: string,
-    animated = true,
-    sameUser = false,
-    previousUser?: string,
-    index?: number,
-  ) => {
-
-    'worklet';
-
-    const newUserIndex = stories.findIndex( ( story ) => story.id === id );
-    const newX = newUserIndex * WIDTH;
-
-    x.value = animated ? withTiming( newX, { duration: storyAnimationDuration } ) : newX;
-
-    if ( sameUser ) {
-
-      startAnimation( true );
-
-      return;
-
-    }
-
-    if ( onStoryEnd && animated ) {
-
-      runOnJS( onStoryEnd )( previousUser ?? userId.value, currentStory.value );
-
-    }
-
-    const newStoryIndex = lastViewed.value[id] !== undefined
-      ? lastViewed.value[id]!
-      : ( ( stories[newUserIndex]?.stories.findIndex(
-        ( story ) => story.id === seenStories.value[id],
-      ) ?? 0 ) + 1 );
-    const userStories = stories[newUserIndex]?.stories;
-    const newStory = userStories?.[index ?? newStoryIndex]?.id ?? userStories?.[0]?.id;
-    currentStory.value = newStory;
-
-    if ( onStoryStart ) {
-
-      runOnJS( onStoryStart )( id, newStory );
-
-    }
-
-  };
-
-  const toNextStory = ( value = true ) => {
-
-    'worklet';
-
-    if ( !value ) {
-
-      return;
-
-    }
-
-    if ( !nextStory.value ) {
-
-      if ( nextUserId.value ) {
-
-        scrollTo( nextUserId.value );
-
-      } else if ( stories[0]?.id && loopingStories === 'all' ) {
-
-        scrollTo( stories[0].id, false );
-
-      } else if ( userId.value && loopingStories === 'onlyLast' ) {
-
-        scrollTo( userId.value, false, undefined, undefined, 0 );
-
+      if (resume) {
+        newDuration -= animation.value * newDuration;
       } else {
+        animation.value = 0;
 
-        onClose();
+        if (userId.value !== undefined && currentStory.value !== undefined) {
+          runOnJS(onSeenStoriesChange)(userId.value, currentStory.value);
+        }
 
+        if (userId.value !== undefined && storyIndex.value! >= 0) {
+          lastViewed.value = {
+            ...lastViewed.value,
+            [userId.value]: storyIndex.value ?? 0,
+          };
+        }
       }
 
-    } else {
+      animation.value = withTiming(1, { duration: newDuration });
+    };
 
-      if ( onStoryEnd ) {
+    const scrollTo = (
+      id: string,
+      animated = true,
+      sameUser = false,
+      previousUser?: string,
+      index?: number
+    ) => {
+      "worklet";
 
-        runOnJS( onStoryEnd )( userId.value, currentStory.value );
+      const newUserIndex = stories.findIndex((story) => story.id === id);
+      const newX = newUserIndex * WIDTH;
 
-      }
+      x.value = animated
+        ? withTiming(newX, { duration: storyAnimationDuration })
+        : newX;
 
-      if ( onStoryStart ) {
-
-        runOnJS( onStoryStart )( userId.value, nextStory.value );
+      if (sameUser) {
+        startAnimation(true);
 
+        return;
       }
 
-      animation.value = 0;
-      currentStory.value = nextStory.value;
-
-    }
-
-  };
-
-  const toPreviousStory = () => {
-
-    'worklet';
-
-    if ( !previousStory.value ) {
-
-      if ( previousUserId.value ) {
-
-        scrollTo( previousUserId.value );
-
-      } else {
-
-        return false;
-
+      if (onStoryEnd && animated) {
+        runOnJS(onStoryEnd)(previousUser ?? userId.value, currentStory.value);
       }
 
-    } else {
-
-      if ( onStoryEnd ) {
-
-        runOnJS( onStoryEnd )( userId.value, currentStory.value );
-
+      const newStoryIndex =
+        lastViewed.value[id] !== undefined
+          ? lastViewed.value[id]!
+          : (stories[newUserIndex]?.stories.findIndex(
+              (story) => story.id === seenStories.value[id]
+            ) ?? 0) + 1;
+      const userStories = stories[newUserIndex]?.stories;
+      const newStory =
+        userStories?.[index ?? newStoryIndex]?.id ?? userStories?.[0]?.id;
+      currentStory.value = newStory;
+
+      if (onStoryStart) {
+        runOnJS(onStoryStart)(id, newStory);
       }
+    };
 
-      if ( onStoryStart ) {
-
-        runOnJS( onStoryStart )( userId.value, previousStory.value );
+    const toNextStory = (value = true) => {
+      "worklet";
 
+      if (!value) {
+        return;
       }
 
-      animation.value = 0;
-      currentStory.value = previousStory.value;
-
-    }
-
-    return true;
-
-  };
-
-  const show = ( id: string ) => {
-
-    setVisible( true );
-    scrollTo( id, false );
-
-  };
-
-  const onGestureEvent = useAnimatedGestureHandler( {
-    onStart: ( e, ctx: GestureContext ) => {
-
-      ctx.x = x.value;
-      ctx.userId = userId.value;
-      paused.value = true;
-
-    },
-    onActive: ( e, ctx ) => {
-
-      if ( ctx.x === x.value
-        && ( ctx.vertical || ( Math.abs( e.velocityX ) < Math.abs( e.velocityY ) ) ) ) {
-
-        ctx.vertical = true;
-        y.value = e.translationY / 2;
-
+      if (!nextStory.value) {
+        if (nextUserId.value) {
+          scrollTo(nextUserId.value);
+        } else if (stories[0]?.id && loopingStories === "all") {
+          scrollTo(stories[0].id, false);
+        } else if (userId.value && loopingStories === "onlyLast") {
+          scrollTo(userId.value, false, undefined, undefined, 0);
+        } else {
+          onClose();
+        }
       } else {
+        if (onStoryEnd) {
+          runOnJS(onStoryEnd)(userId.value, currentStory.value);
+        }
 
-        ctx.moving = true;
-        x.value = Math.max(
-          0,
-          Math.min( ctx.x + -e.translationX, WIDTH * ( stories.length - 1 ) ),
-        );
+        if (onStoryStart) {
+          runOnJS(onStoryStart)(userId.value, nextStory.value);
+        }
 
+        animation.value = 0;
+        currentStory.value = nextStory.value;
       }
+    };
 
-    },
-    onFinish: ( e, ctx ) => {
-
-      if ( ctx.vertical ) {
-
-        if ( e.translationY > 100 ) {
-
-          onClose();
+    const toPreviousStory = () => {
+      "worklet";
 
+      if (!previousStory.value) {
+        if (previousUserId.value) {
+          scrollTo(previousUserId.value);
         } else {
-
-          if ( e.translationY < -100 && onSwipeUp ) {
-
-            runOnJS( onSwipeUp )(
-              stories[userIndex.value]?.id,
-              stories[userIndex.value]?.stories[storyIndex.value ?? 0]?.id,
-            );
-
-          }
-
-          y.value = withTiming( 0 );
-          startAnimation( true );
-
+          return false;
+        }
+      } else {
+        if (onStoryEnd) {
+          runOnJS(onStoryEnd)(userId.value, currentStory.value);
         }
 
-      } else if ( ctx.moving ) {
-
-        const diff = x.value - ctx.x;
-        let newX;
-
-        if ( Math.abs( diff ) < WIDTH / 4 ) {
+        if (onStoryStart) {
+          runOnJS(onStoryStart)(userId.value, previousStory.value);
+        }
 
-          newX = ctx.x;
+        animation.value = 0;
+        currentStory.value = previousStory.value;
+      }
 
+      return true;
+    };
+
+    const show = (id: string) => {
+      setVisible(true);
+      scrollTo(id, false);
+    };
+
+    const onGestureEvent = useAnimatedGestureHandler({
+      onStart: (e, ctx: GestureContext) => {
+        ctx.x = x.value;
+        ctx.userId = userId.value;
+        paused.value = true;
+      },
+      onActive: (e, ctx) => {
+        if (
+          ctx.x === x.value &&
+          (ctx.vertical || Math.abs(e.velocityX) < Math.abs(e.velocityY))
+        ) {
+          ctx.vertical = true;
+          y.value = e.translationY / 2;
         } else {
+          ctx.moving = true;
+          x.value = Math.max(
+            0,
+            Math.min(ctx.x + -e.translationX, WIDTH * (stories.length - 1))
+          );
+        }
+      },
+      onFinish: (e, ctx) => {
+        if (ctx.vertical) {
+          if (e.translationY > 100) {
+            onClose();
+          } else {
+            if (e.translationY < -100 && onSwipeUp) {
+              runOnJS(onSwipeUp)(
+                stories[userIndex.value]?.id,
+                stories[userIndex.value]?.stories[storyIndex.value ?? 0]?.id
+              );
+            }
+
+            y.value = withTiming(0);
+            startAnimation(true);
+          }
+        } else if (ctx.moving) {
+          const diff = x.value - ctx.x;
+          let newX;
+
+          if (Math.abs(diff) < WIDTH / 4) {
+            newX = ctx.x;
+          } else {
+            newX =
+              diff > 0
+                ? Math.ceil(x.value / WIDTH) * WIDTH
+                : Math.floor(x.value / WIDTH) * WIDTH;
+          }
 
-          newX = diff > 0
-            ? Math.ceil( x.value / WIDTH ) * WIDTH
-            : Math.floor( x.value / WIDTH ) * WIDTH;
-
+          const newUserId = stories[Math.round(newX / WIDTH)]?.id;
+          if (newUserId !== undefined) {
+            scrollTo(newUserId, true, newUserId === ctx.userId, ctx.userId);
+          }
         }
 
-        const newUserId = stories[Math.round( newX / WIDTH )]?.id;
-        if ( newUserId !== undefined ) {
+        ctx.moving = false;
+        ctx.vertical = false;
+        ctx.userId = undefined;
+        hideElements.value = false;
+        paused.value = false;
+      },
+    });
 
-          scrollTo( newUserId, true, newUserId === ctx.userId, ctx.userId );
+    const onPressIn = () => {
+      stopAnimation();
+      paused.value = true;
+    };
 
-        }
+    const onLongPress = () => {
+      isLongPress.value = true;
+      hideElements.value = hideElementsOnLongPress ?? false;
+    };
 
+    const onPressOut = () => {
+      if (!isLongPress.value) {
+        return;
       }
 
-      ctx.moving = false;
-      ctx.vertical = false;
-      ctx.userId = undefined;
       hideElements.value = false;
+      isLongPress.value = false;
       paused.value = false;
+      startAnimation(true);
+    };
 
-    },
-  } );
-
-  const onPressIn = () => {
-
-    stopAnimation();
-    paused.value = true;
-
-  };
-
-  const onLongPress = () => {
-
-    isLongPress.value = true;
-    hideElements.value = hideElementsOnLongPress ?? false;
-
-  };
-
-  const onPressOut = () => {
-
-    if ( !isLongPress.value ) {
-
-      return;
-
-    }
-
-    hideElements.value = false;
-    isLongPress.value = false;
-    paused.value = false;
-    startAnimation( true );
-
-  };
-
-  const onPress = ( { nativeEvent: { locationX } }: GestureResponderEvent ) => {
-
-    hideElements.value = false;
-
-    if ( isLongPress.value ) {
-
-      onPressOut();
-
-      return;
-
-    }
-
-    if ( locationX < WIDTH / 2 ) {
-
-      const success = toPreviousStory();
-
-      if ( !success ) {
+    const onPress = ({ nativeEvent: { locationX } }: GestureResponderEvent) => {
+      hideElements.value = false;
 
-        startAnimation( true );
+      if (isLongPress.value) {
+        onPressOut();
 
+        return;
       }
 
-    } else {
-
-      toNextStory();
-
-    }
-
-    paused.value = false;
-
-  };
+      if (locationX < WIDTH / 2) {
+        const success = toPreviousStory();
 
-  useImperativeHandle( ref, () => ( {
-    show,
-    hide: onClose,
-    pause: () => {
-
-      stopAnimation();
-      paused.value = true;
-
-    },
-    resume: () => {
+        if (!success) {
+          startAnimation(true);
+        }
+      } else {
+        toNextStory();
+      }
 
-      startAnimation( true );
       paused.value = false;
+    };
+
+    useImperativeHandle(
+      ref,
+      () => ({
+        show,
+        hide: onClose,
+        pause: () => {
+          stopAnimation();
+          paused.value = true;
+        },
+        resume: () => {
+          startAnimation(true);
+          paused.value = false;
+        },
+        getCurrentStory: () => ({
+          userId: userId.value,
+          storyId: currentStory.value,
+        }),
+        goToPreviousStory: toPreviousStory,
+        goToNextStory: toNextStory,
+        goToSpecificStory: (newUserId, index) =>
+          scrollTo(newUserId, true, false, undefined, index),
+      }),
+      [userId.value, currentStory.value]
+    );
 
-    },
-    getCurrentStory: () => ( { userId: userId.value, storyId: currentStory.value } ),
-    goToPreviousStory: toPreviousStory,
-    goToNextStory: toNextStory,
-    goToSpecificStory: ( newUserId, index ) => scrollTo( newUserId, true, false, undefined, index ),
-  } ), [ userId.value, currentStory.value ] );
+    useEffect(() => {
+      if (visible) {
+        if (currentStory.value !== undefined) {
+          onShow?.(currentStory.value);
+        }
+        onLoad?.();
 
-  useEffect( () => {
+        y.value = withTiming(0, { duration: modalAnimationDuration });
+      } else if (currentStory.value !== undefined && !firstRender.value) {
+        onHide?.(currentStory.value);
+      }
 
-    if ( visible ) {
+      firstRender.value = false;
+    }, [visible]);
 
-      if ( currentStory.value !== undefined ) {
+    useAnimatedReaction(
+      () => animation.value,
+      (res, prev) => res !== prev && toNextStory(res === 1),
+      [animation.value]
+    );
 
-        onShow?.( currentStory.value );
+    return (
+      <Modal
+        statusBarTranslucent={statusBarTranslucent}
+        visible={visible}
+        transparent
+        animationType="none"
+        testID="storyRNModal"
+        onRequestClose={onClose}
+      >
+        <GestureHandler onGestureEvent={onGestureEvent}>
+          <Animated.View style={ModalStyles.container} testID="storyModal">
+            <Pressable
+              onPressIn={onPressIn}
+              onPress={onPress}
+              onLongPress={onLongPress}
+              onPressOut={onPressOut}
+              delayLongPress={LONG_PRESS_DURATION}
+              style={ModalStyles.container}
+            >
+              <Animated.View
+                style={[ModalStyles.bgAnimation, backgroundAnimatedStyles]}
+              />
+              <Animated.View
+                style={[ModalStyles.absolute, animatedStyles, containerStyle]}
+              >
+                {stories?.map((story, index) => (
+                  <StoryList
+                    {...story}
+                    index={index}
+                    x={x}
+                    activeUser={userId}
+                    activeStory={currentStory}
+                    progress={animation}
+                    seenStories={seenStories}
+                    onClose={onClose}
+                    onLoad={(value) => {
+                      onLoad?.();
+                      startAnimation(
+                        undefined,
+                        value !== undefined ? value : duration
+                      );
+                    }}
+                    avatarSize={storyAvatarSize}
+                    textStyle={textStyle}
+                    paused={paused}
+                    videoProps={videoProps}
+                    closeColor={closeIconColor}
+                    hideElements={hideElements}
+                    videoDuration={videoDuration}
+                    key={story.id}
+                    {...props}
+                  />
+                ))}
+              </Animated.View>
+            </Pressable>
+            {footerComponent && footerComponent}
+          </Animated.View>
+        </GestureHandler>
+        {toast}
+      </Modal>
+    );
+  }
+);
 
-      }
-      onLoad?.();
-
-      y.value = withTiming( 0, { duration: modalAnimationDuration } );
-
-    } else if ( currentStory.value !== undefined && !firstRender.value ) {
-
-      onHide?.( currentStory.value );
-
-    }
-
-    firstRender.value = false;
-
-  }, [ visible ] );
-
-  useAnimatedReaction(
-    () => animation.value,
-    ( res, prev ) => res !== prev && toNextStory( res === 1 ),
-    [ animation.value ],
-  );
-
-  return (
-    <Modal statusBarTranslucent={statusBarTranslucent} visible={visible} transparent animationType="none" testID="storyRNModal" onRequestClose={onClose}>
-      <GestureHandler onGestureEvent={onGestureEvent}>
-        <Animated.View style={ModalStyles.container} testID="storyModal">
-          <Pressable
-            onPressIn={onPressIn}
-            onPress={onPress}
-            onLongPress={onLongPress}
-            onPressOut={onPressOut}
-            delayLongPress={LONG_PRESS_DURATION}
-            style={ModalStyles.container}
-          >
-            <Animated.View style={[ ModalStyles.bgAnimation, backgroundAnimatedStyles ]} />
-            <Animated.View style={[ ModalStyles.absolute, animatedStyles, containerStyle ]}>
-              {stories?.map( ( story, index ) => (
-                <StoryList
-                  {...story}
-                  index={index}
-                  x={x}
-                  activeUser={userId}
-                  activeStory={currentStory}
-                  progress={animation}
-                  seenStories={seenStories}
-                  onClose={onClose}
-                  onLoad={( value ) => {
-
-                    onLoad?.();
-                    startAnimation(
-                      undefined,
-                      value !== undefined ? value : duration,
-                    );
-
-                  }}
-                  avatarSize={storyAvatarSize}
-                  textStyle={textStyle}
-                  paused={paused}
-                  videoProps={videoProps}
-                  closeColor={closeIconColor}
-                  hideElements={hideElements}
-                  videoDuration={videoDuration}
-                  key={story.id}
-                  {...props}
-                />
-              ) )}
-            </Animated.View>
-          </Pressable>
-          {footerComponent && footerComponent}
-        </Animated.View>
-      </GestureHandler>
-    </Modal>
-  );
-
-} );
-
-export default memo( StoryModal );
+export default memo(StoryModal);
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/Progress.styles.ts b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/Progress.styles.ts
index a265a10..6ae1dfa 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/Progress.styles.ts
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/Progress.styles.ts
@@ -1,17 +1,17 @@
-import { StyleSheet } from 'react-native';
+import { StyleSheet } from "react-native";
 
-export default StyleSheet.create( {
+export default StyleSheet.create({
   container: {
-    position: 'absolute',
+    position: "absolute",
     top: 16,
     left: 16,
     height: 2,
-    flexDirection: 'row',
+    flexDirection: "row",
     gap: 4,
   },
   item: {
     height: 3,
     borderRadius: 8,
-    overflow: 'hidden',
+    overflow: "hidden",
   },
-} );
+});
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/index.tsx b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/index.tsx
index 3d326e2..e241f8c 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/index.tsx
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/index.tsx
@@ -1,22 +1,34 @@
-import React, { FC, memo } from 'react';
-import { View } from 'react-native';
-import ProgressItem from './item';
-import { WIDTH } from '../../core/constants';
-import ProgressStyles from './Progress.styles';
-import { StoryProgressProps } from '../../core/dto/componentsDTO';
+import React, { FC, memo } from "react";
+import { View } from "react-native";
+import ProgressItem from "./item";
+import { WIDTH } from "../../core/constants";
+import ProgressStyles from "./Progress.styles";
+import { StoryProgressProps } from "../../core/dto/componentsDTO";
 
-const Progress: FC<StoryProgressProps> = ( {
-  progress, active, activeStory, length,
-  progressActiveColor, progressColor, progressContainerStyle,
-} ) => {
-
-  const width = ( (
-    WIDTH - ProgressStyles.container.left * 2 ) - ( length - 1 )
-    * ProgressStyles.container.gap ) / length;
+const Progress: FC<StoryProgressProps> = ({
+  progress,
+  active,
+  activeStory,
+  length,
+  progressActiveColor,
+  progressColor,
+  progressContainerStyle,
+}) => {
+  const width =
+    (WIDTH -
+      ProgressStyles.container.left * 2 -
+      (length - 1) * ProgressStyles.container.gap) /
+    length;
 
   return (
-    <View style={[ ProgressStyles.container, progressContainerStyle, { width: WIDTH } ]}>
-      {[ ...Array( length ).keys() ].map( ( val ) => (
+    <View
+      style={[
+        ProgressStyles.container,
+        progressContainerStyle,
+        { width: WIDTH },
+      ]}
+    >
+      {[...Array(length).keys()].map((val) => (
         <ProgressItem
           active={active}
           activeStory={activeStory}
@@ -27,10 +39,9 @@ const Progress: FC<StoryProgressProps> = ( {
           progressActiveColor={progressActiveColor}
           progressColor={progressColor}
         />
-      ) )}
+      ))}
     </View>
   );
-
 };
 
-export default memo( Progress );
+export default memo(Progress);
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/item.tsx b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/item.tsx
index 6c91946..ff8c81f 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/item.tsx
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/components/Progress/item.tsx
@@ -1,43 +1,58 @@
-import React, { FC, memo } from 'react';
-import { View } from 'react-native';
-import Animated, { useAnimatedStyle } from 'react-native-reanimated';
-import { StoryProgressItemProps } from '../../core/dto/componentsDTO';
-import ProgressStyles from './Progress.styles';
-import { PROGRESS_ACTIVE_COLOR, PROGRESS_COLOR } from '../../core/constants';
-
-const AnimatedView = Animated.createAnimatedComponent( View );
-
-const ProgressItem: FC<StoryProgressItemProps> = ( {
-  progress, active, activeStory, index, width,
-  progressActiveColor = PROGRESS_ACTIVE_COLOR, progressColor = PROGRESS_COLOR,
-} ) => {
-
-  const animatedStyle = useAnimatedStyle( () => {
-
-    if ( !active.value || activeStory.value < index ) {
-
+import React, { FC, memo } from "react";
+import { View } from "react-native";
+import Animated, { useAnimatedStyle } from "react-native-reanimated";
+import { StoryProgressItemProps } from "../../core/dto/componentsDTO";
+import ProgressStyles from "./Progress.styles";
+import { PROGRESS_ACTIVE_COLOR, PROGRESS_COLOR } from "../../core/constants";
+
+const AnimatedView = Animated.createAnimatedComponent(View);
+
+const ProgressItem: FC<StoryProgressItemProps> = ({
+  progress,
+  active,
+  activeStory,
+  index,
+  width,
+  progressActiveColor = PROGRESS_ACTIVE_COLOR,
+  progressColor = PROGRESS_COLOR,
+}) => {
+  const animatedStyle = useAnimatedStyle(() => {
+    if (!active.value || activeStory.value < index) {
       return { width: 0 };
-
     }
 
-    if ( activeStory.value > index ) {
-
+    if (activeStory.value > index) {
       return { width };
-
     }
 
     return { width: width * progress.value };
-
-  } );
+  });
 
   return (
-    <View style={[ ProgressStyles.item, { backgroundColor: progressColor }, { width } ]}>
+    <View
+      style={[
+        {
+          height: 3,
+          borderRadius: 8,
+          overflow: "hidden",
+        },
+        { backgroundColor: progressColor },
+        { width },
+      ]}
+    >
       <AnimatedView
-        style={[ ProgressStyles.item, { backgroundColor: progressActiveColor }, animatedStyle ]}
+        style={[
+          {
+            height: 3,
+            borderRadius: 8,
+            overflow: "hidden",
+          },
+          { backgroundColor: progressActiveColor },
+          animatedStyle,
+        ]}
       />
     </View>
   );
-
 };
 
-export default memo( ProgressItem );
+export default memo(ProgressItem);
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/componentsDTO.ts b/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/componentsDTO.ts
index 434f9cd..326e70e 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/componentsDTO.ts
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/componentsDTO.ts
@@ -1,25 +1,33 @@
-import { SharedValue } from 'react-native-reanimated';
+import { SharedValue } from "react-native-reanimated";
 import {
-  ImageProps, ImageStyle, TextProps, TextStyle, ViewStyle,
-} from 'react-native';
-import { ReactNode } from 'react';
-import { InstagramStoriesProps, InstagramStoryProps, StoryItemProps } from './instagramStoriesDTO';
-import { ProgressStorageProps } from './helpersDTO';
+  ImageProps,
+  ImageStyle,
+  TextProps,
+  TextStyle,
+  ViewStyle,
+} from "react-native";
+import { ReactNode } from "react";
+import {
+  InstagramStoriesProps,
+  InstagramStoryProps,
+  StoryItemProps,
+} from "./instagramStoriesDTO";
+import { ProgressStorageProps } from "./helpersDTO";
 
 export interface StoryAvatarListProps {
   stories: InstagramStoryProps[];
-  loadingStory: StoryAvatarProps['loadingStory'];
-  seenStories: StoryAvatarProps['seenStories'];
-  colors: StoryAvatarProps['colors'];
-  seenColors: StoryAvatarProps['seenColors'];
-  size: StoryAvatarProps['size'];
-  showName: InstagramStoriesProps['showName'];
-  nameTextStyle: InstagramStoriesProps['nameTextStyle'];
-  nameTextProps: InstagramStoriesProps['nameTextProps'];
-  avatarListContainerStyle: InstagramStoriesProps['avatarListContainerStyle'];
-  avatarListContainerProps: InstagramStoriesProps['avatarListContainerProps'];
+  loadingStory: StoryAvatarProps["loadingStory"];
+  seenStories: StoryAvatarProps["seenStories"];
+  colors: StoryAvatarProps["colors"];
+  seenColors: StoryAvatarProps["seenColors"];
+  size: StoryAvatarProps["size"];
+  showName: InstagramStoriesProps["showName"];
+  nameTextStyle: InstagramStoriesProps["nameTextStyle"];
+  nameTextProps: InstagramStoriesProps["nameTextProps"];
+  avatarListContainerStyle: InstagramStoriesProps["avatarListContainerStyle"];
+  avatarListContainerProps: InstagramStoriesProps["avatarListContainerProps"];
   avatarBorderRadius?: number;
-  onPress: ( id: string ) => void;
+  onPress: (id: string) => void;
 }
 
 export interface StoryAvatarProps extends InstagramStoryProps {
@@ -62,35 +70,36 @@ export interface StoryModalProps {
   footerComponent?: ReactNode;
   hideElementsOnLongPress?: boolean;
   hideOverlayViewOnLongPress?: boolean;
-  loopingStories?: 'none' | 'all' | 'onlyLast';
+  loopingStories?: "none" | "all" | "onlyLast";
   statusBarTranslucent?: boolean;
+  toast?: ReactNode;
   onLoad: () => void;
-  onShow?: ( id: string ) => void;
-  onHide?: ( id: string ) => void;
-  onSeenStoriesChange: ( user: string, value: string ) => void;
-  onSwipeUp?: ( userId?: string, storyId?: string ) => void;
-  onStoryStart?: ( userId?: string, storyId?: string ) => void;
-  onStoryEnd?: ( userId?: string, storyId?: string ) => void;
+  onShow?: (id: string) => void;
+  onHide?: (id: string) => void;
+  onSeenStoriesChange: (user: string, value: string) => void;
+  onSwipeUp?: (userId?: string, storyId?: string) => void;
+  onStoryStart?: (userId?: string, storyId?: string) => void;
+  onStoryEnd?: (userId?: string, storyId?: string) => void;
 }
 
 export type StoryModalPublicMethods = {
-  show: ( id: string ) => void;
+  show: (id: string) => void;
   hide: () => void;
   pause: () => void;
   resume: () => void;
   goToPreviousStory: () => void;
   goToNextStory: () => void;
-  getCurrentStory: () => { userId?: string, storyId?: string };
-  goToSpecificStory: ( userId: string, index?: number ) => void;
+  getCurrentStory: () => { userId?: string; storyId?: string };
+  goToSpecificStory: (userId: string, index?: number) => void;
 };
 
 export type GestureContext = {
-  x: number,
-  pressedX: number,
-  pressedAt: number,
-  moving: boolean,
-  vertical: boolean,
-  userId?: string,
+  x: number;
+  pressedX: number;
+  pressedAt: number;
+  moving: boolean;
+  vertical: boolean;
+  userId?: string;
 };
 
 export interface AnimationProps {
@@ -100,7 +109,7 @@ export interface AnimationProps {
 }
 
 export interface StoryImageProps {
-  stories: InstagramStoryProps['stories'];
+  stories: InstagramStoryProps["stories"];
   activeStory: SharedValue<string | undefined>;
   defaultStory?: StoryItemProps;
   isDefaultVideo: boolean;
@@ -111,8 +120,8 @@ export interface StoryImageProps {
   imageStyles?: ImageStyle;
   imageProps?: ImageProps;
   videoDuration?: number;
-  onImageLayout: ( height: number ) => void;
-  onLoad: ( duration?: number ) => void;
+  onImageLayout: (height: number) => void;
+  onLoad: (duration?: number) => void;
 }
 
 export interface StoryProgressProps {
@@ -125,22 +134,25 @@ export interface StoryProgressProps {
   progressContainerStyle?: ViewStyle;
 }
 
-export interface StoryProgressItemProps extends Omit<StoryProgressProps, 'length'> {
+export interface StoryProgressItemProps
+  extends Omit<StoryProgressProps, "length"> {
   index: number;
   width: number;
 }
 
 export interface StoryHeaderProps {
-  avatarSource: ImageProps['source'];
+  avatarSource: ImageProps["source"];
   name?: string;
   avatarSize: number;
   textStyle?: TextStyle;
   closeColor: string;
   headerStyle?: ViewStyle;
   headerContainerStyle?: ViewStyle;
+  onMore: () => void;
   onClose: () => void;
   renderStoryHeader?: () => ReactNode;
   onStoryHeaderPress?: () => void;
+  toast?: ReactNode;
 }
 
 export interface IconProps {
@@ -148,7 +160,7 @@ export interface IconProps {
 }
 
 export interface StoryContentProps {
-  stories: InstagramStoryProps['stories'];
+  stories: InstagramStoryProps["stories"];
   active: SharedValue<boolean>;
   activeStory: SharedValue<string | undefined>;
 }
@@ -172,13 +184,13 @@ export interface StoryListProps extends InstagramStoryProps, StoryHeaderProps {
   hideElements: SharedValue<boolean>;
   hideOverlayViewOnLongPress?: boolean;
   videoDuration?: number;
-  onLoad: ( duration?: number ) => void;
+  onLoad: (duration?: number) => void;
 }
 
 export interface StoryVideoProps {
-  source: ImageProps['source'];
+  source: ImageProps["source"];
   paused: SharedValue<boolean>;
   isActive: SharedValue<boolean>;
-  onLoad: ( duration: number ) => void;
-  onLayout: ( height: number ) => void;
+  onLoad: (duration: number) => void;
+  onLayout: (height: number) => void;
 }
diff --git a/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/instagramStoriesDTO.ts b/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/instagramStoriesDTO.ts
index a04cc33..06bc587 100644
--- a/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/instagramStoriesDTO.ts
+++ b/node_modules/@birdwingo/react-native-instagram-stories/src/core/dto/instagramStoriesDTO.ts
@@ -1,15 +1,18 @@
-import { ReactNode } from 'react';
+import { ReactNode } from "react";
 import {
   ImageProps,
   ImageStyle,
-  ScrollViewProps, TextStyle, ViewStyle, TextProps,
-} from 'react-native';
-import { FlashListProps } from '@shopify/flash-list';
+  ScrollViewProps,
+  TextStyle,
+  ViewStyle,
+  TextProps,
+} from "react-native";
+import { FlashListProps } from "@shopify/flash-list";
 
 export interface StoryItemProps {
   id: string;
-  source: ImageProps['source'];
-  mediaType?: 'image' | 'video';
+  source: ImageProps["source"];
+  mediaType?: "image" | "video";
   animationDuration?: number;
   renderContent?: () => ReactNode;
   renderFooter?: () => ReactNode;
@@ -17,8 +20,8 @@ export interface StoryItemProps {
 
 export interface InstagramStoryProps {
   id: string;
-  avatarSource: ImageProps['source'];
-  renderAvatar?: ( seen: boolean ) => ReactNode;
+  avatarSource: ImageProps["source"];
+  renderAvatar?: (seen: boolean) => ReactNode;
   renderStoryHeader?: () => ReactNode;
   onStoryHeaderPress?: () => void;
   name?: string;
@@ -32,8 +35,10 @@ export interface InstagramStoriesProps {
   avatarSeenBorderColors?: string[];
   avatarSize?: number;
   storyAvatarSize?: number;
-  avatarListContainerStyle?: ScrollViewProps['contentContainerStyle'];
-  avatarListContainerProps?: ScrollViewProps | Partial<FlashListProps<InstagramStoryProps>>;
+  avatarListContainerStyle?: ScrollViewProps["contentContainerStyle"];
+  avatarListContainerProps?:
+    | ScrollViewProps
+    | Partial<FlashListProps<InstagramStoryProps>>;
   containerStyle?: ViewStyle;
   textStyle?: TextStyle;
   animationDuration?: number;
@@ -59,28 +64,32 @@ export interface InstagramStoriesProps {
   imageOverlayView?: ReactNode;
   hideElementsOnLongPress?: boolean;
   hideOverlayViewOnLongPress?: boolean;
-  loopingStories?: 'none' | 'all' | 'onlyLast';
+  loopingStories?: "none" | "all" | "onlyLast";
   statusBarTranslucent?: boolean;
   footerComponent?: ReactNode;
   avatarBorderRadius?: number;
-  onShow?: ( id: string ) => void;
-  onHide?: ( id: string ) => void;
-  onSwipeUp?: ( userId?: string, storyId?: string ) => void;
-  onStoryStart?: ( userId?: string, storyId?: string ) => void;
-  onStoryEnd?: ( userId?: string, storyId?: string ) => void;
+  onShow?: (id: string) => void;
+  onHide?: (id: string) => void;
+  onSwipeUp?: (userId?: string, storyId?: string) => void;
+  onStoryStart?: (userId?: string, storyId?: string) => void;
+  onStoryEnd?: (userId?: string, storyId?: string) => void;
 }
 
 export type InstagramStoriesPublicMethods = {
-  spliceStories: ( stories: InstagramStoryProps[], index?: number ) => void;
-  spliceUserStories: ( stories: StoryItemProps[], user: string, index?: number ) => void;
-  setStories: ( stories: InstagramStoryProps[] ) => void;
+  spliceStories: (stories: InstagramStoryProps[], index?: number) => void;
+  spliceUserStories: (
+    stories: StoryItemProps[],
+    user: string,
+    index?: number
+  ) => void;
+  setStories: (stories: InstagramStoryProps[]) => void;
   clearProgressStorage: () => void;
   hide: () => void;
-  show: ( id?: string ) => void;
+  show: (id?: string) => void;
   pause: () => void;
   resume: () => void;
   goToPreviousStory: () => void;
   goToNextStory: () => void;
-  getCurrentStory: () => { userId?: string, storyId?: string };
-  goToSpecificStory: ( userId: string, index?: number ) => void;
+  getCurrentStory: () => { userId?: string; storyId?: string };
+  goToSpecificStory: (userId: string, index?: number) => void;
 };
